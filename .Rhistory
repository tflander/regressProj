?geom_smooth
model <- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid$mpg <- stats::predict(model, newdata=grid)
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
model <- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid$mpg <- stats::predict(model, newdata=grid)
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
mtc <- mtcars[mtcars$cyl != 6,]
mtc$cyl48 <- sapply(mtc$cyl, function(x) {
if(x == 8) 1 else 0
})
fit <- lm(mpg ~ wt + cyl48 + wt * cyl48, data=mtc)
summary(fit)$coef
ic4 <- summary(fit)$coef[1] # expected mpg for 0-wt 4-banger
slope4 <- summary(fit)$coef[2]
ic8 <- ic4 + summary(fit)$coef[3]
slope8 <- slope4 + summary(fit)$coef[4]
summary(lm(mpg ~ cyl48, data=mtc))$coef
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))$coef
n <- 100
t <- rep(c(0, 1), c(n/2, n/2))
x <- c(.5 + runif(n/2), runif(n/2));
beta0 <- 0
beta1 <- 2
tau <- 1
sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
# little difference when we don't adjust for X
abline(h = mean(y[1 : (n/2)]), lwd = 3, col = "red")
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3, col = "green")
fit <- lm(y ~ x + t)
# treated is higher after adjusting for X
abline(coef(fit)[1], coef(fit)[2], lwd = 3, col="red")
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2, -1, 1), runif(n/2, -1, 1));
beta0 <- 0; beta1 <- 2; tau <- 0; tau1 <- -4; sigma <- .2
y <- beta0 + x * beta1 + t * tau + t * x * tau1 + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t + I(x * t))
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
p <- 1
n <- 100; x2 <- runif(n); x1 <- p * runif(n) - (1 - p) * x2
beta0 <- 0; beta1 <- 1; tau <- 4 ; sigma <- .01
y <- beta0 + x1 * beta1 + tau * x2 + rnorm(n, sd = sigma)
plot(x1, y, type = "n", frame = FALSE)
abline(lm(y ~ x1), lwd = 2)
co.pal <- heat.colors(n)
points(x1, y, pch = 21, col = "black", bg = co.pal[round((n - 1) * x2 + 1)], cex = 2)
library(rgl)
plot3d(x1, x2, y)
package.install("rgl")
install.packages("rgl")
library(rgl)
plot3d(x1, x2, y)
detach("package:datasets", unload=TRUE)
library("datasets", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:rgl", unload=TRUE)
install.packages("rgl")
remove.packages("rgl")
install.packages("rgl")
remove.packages("rgl")
install.packages("rgl")
library(rgl)
plot(resid(lm(x1 ~ x2)), resid(lm(y ~ x2)), frame = FALSE, col = "black", bg = "lightblue", pch = 21, cex = 2)
abline(lm(I(resid(lm(x1 ~ x2))) ~ I(resid(lm(y ~ x2)))), lwd = 2)
p <- 1
n <- 100; x2 <- runif(n); x1 <- p * runif(n) - (1 - p) * x2
beta0 <- 0; beta1 <- 1; tau <- 4 ; sigma <- .01
y <- beta0 + x1 * beta1 + tau * x2 + rnorm(n, sd = sigma)
plot(x1, y, type = "n", frame = FALSE)
abline(lm(y ~ x1), lwd = 2)
co.pal <- heat.colors(n)
points(x1, y, pch = 21, col = "black", bg = co.pal[round((n - 1) * x2 + 1)], cex = 2)
plot(resid(lm(x1 ~ x2)), resid(lm(y ~ x2)), frame = FALSE, col = "black", bg = "lightblue", pch = 21, cex = 2)
abline(lm(I(resid(lm(x1 ~ x2))) ~ I(resid(lm(y ~ x2)))), lwd = 2)
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
They probe your data in different ways to diagnose different problems.
Patterns in your residual plots generally indicate some poor aspect of model fit. These can include:
Heteroskedasticity (non constant variance).
Missing model terms.
Temporal patterns (plot residuals versus collection order).
Residual QQ plots investigate normality of the errors.
Leverage measures (hat values) can be useful for diagnosing data entry errors.
Influence measures get to the bottom line, 'how does deleting or including this point impact a
n <- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
fit <- lm(y ~ x)
round(dfbetas(fit)[1 : 10, 2], 3)
dfbetas(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
dfbetas(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
dfbetas(fit)
x <- rnorm(n); y <- x + rnorm(n, sd = .3)
x <- c(5, x); y <- c(5, y)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
fit2 <- lm(y ~ x)
abline(fit2)
n <- 100
x <- rnorm(n); y <- x + rnorm(n, sd = .3)
x <- c(5, x); y <- c(5, y)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
fit2 <- lm(y ~ x)
abline(fit2)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
hatvalues(fit)
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
pairs(dat)
summary(lm(V1 ~ . -1, data = dat))$coef
fit <- lm(V1 ~ . - 1, data = dat); plot(predict(fit), resid(fit), pch = '.')
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
fit <- lm(V1 ~ . - 1, data = dat)
plot(fit)
fit <- lm(mpg ~ wt + cyl + wt * cyl, data=mtcars)
summary(fit)$coef
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ wt + cyl + wt * cyl, data=mtcars)
summary(fit)$coef
ic4 <- summary(fit)$coef[1] # expected mpg for 0-wt 4-banger
slope4 <- summary(fit)$coef[2]
ic6 <- ic4 + summary(fit)$coef[3]
slope6 <- slope4 + summary(fit)$coef[4]
ic8 <- ic4 + summary(fit)$coef[5]
slope8 <- slope4 + summary(fit)$coef[4]
ic4 <- summary(fit)$coef[1] # expected mpg for 0-wt 4-banger
slope4 <- summary(fit)$coef[2]
ic6 <- ic4 + summary(fit)$coef[3]
slope6 <- slope4 + summary(fit)$coef[5]
ic8 <- ic4 + summary(fit)$coef[4]
slope8 <- slope4 + summary(fit)$coef[6]
slope4 - slope8
mtc <- mtcars[mtcars$cyl != 6,]
mtc$cyl48 <- sapply(mtc$cyl, function(x) {
if(x == 8) 1 else 0
})
mtc$cyl48 <- factor(mtc$cyl48)
fit <- lm(mpg ~ wt + cyl48 + wt * cyl48, data=mtc)
summary(fit)$coef
ic4 <- summary(fit)$coef[1] # expected mpg for 0-wt 4-banger
slope4 <- summary(fit)$coef[2]
ic8 <- ic4 + summary(fit)$coef[3]
slope8 <- slope4 + summary(fit)$coef[4]
slope4 - slope8
ic4-ic8
summary(fit)
slope4 - slope8
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt + wt * cyl, data=mtcars)
summary(fit)$coef
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt + wt * cyl, data=mtcars)
summary(fit)$coef
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ wt + cyl + wt * cyl, data=mtcars)
summary(fit)$coef
ic4 <- summary(fit)$coef[1] # expected mpg for 0-wt 4-banger
slope4 <- summary(fit)$coef[2]
ic6 <- ic4 + summary(fit)$coef[3]
slope6 <- slope4 + summary(fit)$coef[5]
ic8 <- ic4 + summary(fit)$coef[4]
slope8 <- slope4 + summary(fit)$coef[6]
summary(fit)$coef[3]
summary(fit)$coef[3] - summary(fit)$coef[4]
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ wt + cyl , data=mtcars)
summary(fit)$coef
-3.205613 - -6.070860
-3.205613 + -6.070860
summary(lm(mpg ~ ., data=mtcars))
summary(lm(mpg ~ . - 1, data=mtcars))
17.81984 - 19.45728
17.81984 - 19.45728 + -3.80625
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ wt + cyl , data=mtcars)
summary(fit)$coef
plot(fit)
-3.205613 - -6.070860
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ wt + cyl + wt * cyl, data=mtcars)
summary(fit)
fit <- lm(mpg ~ wt + cyl + wt * cyl, data=mtcars)
summary(fit)$coef
fit2 <- lm(mpg ~ wt + cyl , data=mtcars)
summary(fit2)$coef
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
coef(lm(y ~ x1))
y <- x1 + rnorm(n, sd = .3)
a <- summary(lm(y ~ x1))$cov.unscaled[2,2]
c(summary(lm(y ~ x1 + x2))$cov.unscaled[2,2],
summary(lm(y~ x1 + x2 + x3))$cov.unscaled[2,2]) / a
data(swiss);
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
a <- summary(fit1)$cov.unscaled[2,2]
fit2 <- update(fit, Fertility ~ Agriculture + Examination)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
c(summary(fit2)$cov.unscaled[2,2],
summary(fit3)$cov.unscaled[2,2]) / a
fit <- lm(Fertility ~ ., data = swiss)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
a <- summary(fit1)$cov.unscaled[2,2]
fit2 <- update(fit, Fertility ~ Agriculture + Examination)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
c(summary(fit2)$cov.unscaled[2,2],
summary(fit3)$cov.unscaled[2,2]) / a
vif(fit)
library(car)
packages.install(car)
install.packages(car)
install.packages("car")
vif(fit)
library(car)
vif(fit)
?vif
sqrt(vif(fit))
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
fit <- lm(Fertility ~ ., data = swiss)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ ., data=mtcars)
fit1 <- lm(mpg ~ wt + cyl, data=mtcars)
fit2 <- update(fit1, wt * cyl)
anova(fit1, fit2)
View(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ ., data=mtcars)
fit1 <- lm(mpg ~ wt + cyl, data=mtcars)
fit2 <- update(fit1, mpg ~ wt * cyl)
anova(fit1, fit2)
mtcars$cyl <- factor(mtcars$cyl)
fit <- lm(mpg ~ cyl + wt)
summary(fit)$coef
fit <- lm(mpg ~ cyl + wt, data=mtcars)
summary(fit)$coef
fit1 <- lm(mpg ~ cyl, data=mtcars)
summary(fit1)$coef
plot(x,y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
abline(fit)
fit <- lm(y~x)
abline(fit)
swirl()
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- out2[-1, ]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(fit$residuals / fit$df)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sqrt(deviance(fit)/df.residual(fit)*sqrt(1-hatvalues(fit)))
resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
std <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1] / (sigma1 * sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / 2*sigma^2
sum(dy^2) / (2*sigma^2)
plot(fit, which=5)
setwd("/common/coursera/modelingRegressionTakeTwo/project")
fit <- lm(mpg ~ wt + disp, data=mtcars)
plot(mtcars$wt+disp, mtcars$mpg)
plot(mtcars$wt+mtcars$disp, mtcars$mpg)
abline(fit)
fit <- lm(mpg ~ wt + am + wt*am, data=mtcars)
summary(fit)
fitu <- lm(mpg ~ wt, data=mtcars)
summart(fitu)
summary(fitu)
fitx <- lm(mpg ~ wt + am, data=mtcars)
summary(fit)
summary(fitx)
fity <- lm(mpg ~ wt + disp + am + wt*disp*am, data=mtcars)
summary(fity)
summary(fit)
model <- lm(mpg ~ wt + factor(am), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
am = levels(factor(am))
))
grid$mpg <- stats::predict(model, newdata=grid)
qplot(wt, mpg, data=mtcars, colour=factor(am)) + geom_line(data=grid)
library(ggplot2)
model <- lm(mpg ~ wt + factor(am), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
am = levels(factor(am))
))
grid$mpg <- stats::predict(model, newdata=grid)
qplot(wt, mpg, data=mtcars, colour=factor(am)) + geom_line(data=grid)
stats::predict(model, newdata=grid)
fit <- lm(mpg ~ am + wt * disp, data=mtcars)
summary(fit)
fit <- lm(mpg ~ am + wt * disp, data=mtcars)
summary(fit)
icNoWtDisp <- summary(fit)$coef[1]
class(mtcars$am)
fit <- lm(mpg ~ factor(am) + wt * disp, data=mtcars)
summary(fit)
slopeAuto <- summary(fit)$coef[2]
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit1, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
data(swiss);
fit <- lm(Fertility ~ ., data = swiss)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
a <- summary(fit1)$cov.unscaled[2,2]
fit2 <- update(fit, Fertility ~ Agriculture + Examination)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
c(summary(fit2)$cov.unscaled[2,2], summary(fit3)$cov.unscaled[2,2]) / a
data(swiss);
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
a <- summary(fit1)$cov.unscaled[2,2]
fit2 <- update(fit1, Fertility ~ Agriculture + Examination)
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
c(summary(fit2)$cov.unscaled[2,2], summary(fit3)$cov.unscaled[2,2]) / a
fit <- lm(Fertility ~ ., data = swiss)
summary(fit)
summary(fit1)
fit <- lm(mpg~wt, data=mtcars)
fit2 <- update(fit, mpg~wt+disp)
anova(fit,fit2)
fit3 <- lm(mpg~wt+disp, data=mtcars)
anova(fit,fit3)
anova(fit,fit2)
dfbetas(fit)
View(mtcars)
dfbetas(fit)[1]
dfbetas(fit)[1,]
max(dfbetas(fit)[1])
max(dfbetas(fit)[2])
min(dfbetas(fit)[2])
max(dfbetas(fit)[2,])
max(dfbetas(fit)[1,])
min(dfbetas(fit)[1,])
min(dfbetas(fit)[2,])
dfbetas(fit)[2,]
dfbetas(fit)[,2]
max(dfbetas(fit)[,2])
dfbetas(fit)[,2]
abs(dfbetas(fit)[,2])
max(abs(dfbetas(fit)[,2]))
max(abs(dfbetas(fit)[,1]))
fit <- lm(mpg~wt, data=mtcars)
dfb <- dfbetas(fit)
levIc <- max(abs(dfbetas(fit)[,1]))
levSlope <- max(abs(dfbetas(fit)[,2]))
dfb
dfb$(Intercept)
dfb$[,1]
dfb[,1]
dfb[abs(dfb[,1]) == levIc]
class(dfb[abs(dfb[,1]) == levIc])
dfb[abs(dfb[,2]) == levSlope]
dfb[abs(dfb[,2]) == levSlope]$rowname
dfb[abs(dfb[,2]) == levSlope,]
dfb[abs(dfb[,2]) == levSlope]
dfb[abs(dfb[,2]) == levSlope,]
class(dfb[abs(dfb[,2]) == levSlope,])
rowname(mtcars)
mtcars$rowname
mtcars$rowName
row.names(mtcars)
row.names(dfb)
row.names(dfb[abs(dfb[,2]) == levSlope])
meanWt <- mean(mtcars$wt)
# TODO:  watch more videos to see how to calculate the intercept.
fitTotal <- lm(mpg~wt, data=mtcars)
fitTotalMeanIc <- lm(mpg~I(wt-meanWt), data=mtcars)
beta1Total <- coef(fitTotal)[2]
icTotal  <- coef(fitTotal)[1]
icTotalByMean  <- coef(fitTotalMeanIc)[1]
manual <- mtcars[mtcars$am==1,]
automatic <- mtcars[mtcars$am==0,]
# fitManual <- lm(mpg~wt, data=manual)
# beta1Manual <- coef(fitManual)[2]
# icManual  <- coef(fitManual)[1]
#
# fitAutomatic <- lm(mpg~wt, data=automatic)
# beta1Automatic <- coef(fitAutomatic)[2]
# icAutomatic  <- coef(fitAutomatic)[1]
# > icAutomatic
# (Intercept)
# 31.41606
# > icManual
# (Intercept)
# 46.29448
# > icTotal
# (Intercept)
# 37.28513
# > icAutomatic - icManual
# (Intercept)
# -14.87842
# > meanWt
# [1] 3.21725
fitManual <- lm(mpg~I(wt-meanWt), data=manual)
beta1Manual <- coef(fitManual)[2]
icManual  <- coef(fitManual)[1]
fitAutomatic <- lm(mpg~I(wt-meanWt), data=automatic)
beta1Automatic <- coef(fitAutomatic)[2]
icAutomatic  <- coef(fitAutomatic)[1]
# icAutomatic - icManual
# (Intercept)
# 2.167728
library(ggplot2)
g = ggplot(mtcars, aes(x=wt, y=mpg))
g = g + geom_point(size=6, color="black", alpha=0.2)
g = g + xlab("weight (1,000 pounds)") + ylab("MPG")
g = g + geom_point(size=6, color="black", alpha=0.2)
g = g + geom_point(size=5, color="blue", alpha=0.2)
g = g + geom_smooth(method="lm", color="black")
g = g + geom_abline(intercept=icManual+icTotal-icTotalByMean, slope=beta1Total)
g = g + geom_abline(intercept=icAutomatic+icTotal-icTotalByMean, slope=beta1Total)
print(g)
mtcars
mtc1 <- mtcars[-17,]
mtc
mtc1
mtc <- mtcars[-c(17,18,20),] # get rid of the imperial, fiat, and corolla
View(mtc)
fit <- lm(mpg ~ wt + am + wt*am, data=mtcars)
fit1 <- lm(mpg ~ wt + am, data=mtcars)
summary(fit)
summary(fit1)
fit <- lm(mpg ~ wt + am + wt*am, data=mtcars)
fitu <- lm(mpg ~ wt, data=mtcars)
fit1 <- lm(mpg ~ wt+cyl, data=mtcars)
summary(fit1)
plot(fit1)
fit <- lm(mpg ~ wt + am + wt*am, data=mtcars)
dfb <- dfbetas(fit)
x <- abs(dfbetas(fit))
x
dfb
dfb[,2]
dfb
View(dfb[,2])
View(dfb[,2] < 0.05)
a <- dfb[(dfb[,2] < 0.05),]
a
row.names(a)
colors()
